// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const findAuthorByID = `-- name: FindAuthorByID :one
SELECT id, name
FROM authors
WHERE id = $1
LIMIT 1
`

func (q *Queries) FindAuthorByID(ctx context.Context, id int64) (Author, error) {
	row := q.db.QueryRow(ctx, findAuthorByID, id)
	var i Author
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const findAuthorsByName = `-- name: FindAuthorsByName :many
SELECT id, name
FROM authors
WHERE name = $1
`

func (q *Queries) FindAuthorsByName(ctx context.Context, name string) ([]Author, error) {
	rows, err := q.db.Query(ctx, findAuthorsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

type InsertArticlesParams struct {
	ID          int64
	Title       string
	Body        string
	PublishedAt pgtype.Timestamptz
}

type InsertAuthorsParams struct {
	ID   int64
	Name string
}

const recentArticles = `-- name: RecentArticles :many
SELECT id, title, body, published_at
FROM articles
ORDER BY published_at DESC
LIMIT $1
`

func (q *Queries) RecentArticles(ctx context.Context, limit int32) ([]Article, error) {
	rows, err := q.db.Query(ctx, recentArticles, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Article
	for rows.Next() {
		var i Article
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Body,
			&i.PublishedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
